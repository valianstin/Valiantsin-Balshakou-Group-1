package com.epam.task.classloader;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.apache.log4j.Logger;

public class IncrementClassLoader extends ClassLoader {
	static final Logger logger = Logger.getLogger(IncrementClassLoader.class);

	private String path;

	public IncrementClassLoader(String path, ClassLoader parent) {
		super(parent);
		this.path = path;
	}

	protected Class findClass(final String name) throws ClassNotFoundException {

		

		try {
			final File f = findFile(name.replace('.', '/'), ".class");
			logger.info("% Class " + name + f == null ? "" : " found in " + f);
			byte[] classBytes = loadFileAsBytes(f);
			return defineClass(name, classBytes, 0, classBytes.length);

		} catch (IOException e) {
			throw new ClassNotFoundException(
					"Format of class file incorrect for class " + name + ": "
							+ e);
		} catch (ClassFormatError e) {
			throw new ClassNotFoundException(
					"Format of class file incorrect for class " + name + ": "
							+ e);

		}
	}

	private File findFile(String name, String extension) throws IOException {
		JarFile jarFile = new JarFile(path);
		 Enumeration entries = jarFile.entries();
		 JarEntry jarEntry =  jarFile.getJarEntry("");
		 jarEntry = (JarEntry) entries.nextElement();
		File f = new File((new File(path).getPath() + File.separatorChar
				+ name.replace('/', File.separatorChar) + extension));
		if (f.exists())
			return f;
		return null;
	}

	public static byte[] loadFileAsBytes(File file) throws IOException {
		byte[] result = new byte[(int) file.length()];
		FileInputStream f = new FileInputStream(file);
		try {
			f.read(result, 0, result.length);
		} finally {
			try {
				f.close();
			} catch (Exception e) {
				logger.error(e.getMessage());
			}
		}
		return result;
	}
}
