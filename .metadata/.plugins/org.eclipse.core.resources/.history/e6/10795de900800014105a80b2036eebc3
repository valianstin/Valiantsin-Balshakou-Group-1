package com.epam.jmp.hibernate.beans;

import java.util.Collection;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

import com.epam.jmp.hibernate.exceptions.DaoException;

@Entity
@Table(name = "Project")
public class Project {

	@Id
	@Column(name = "id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;

	@Column(name = "name")
	private String name;

	@Column(name = "description")
	private String description;

	@ManyToMany
	@JoinTable(name = "employee_projects",
	joinColumns=@JoinColumn(name="projectId"),
	inverseJoinColumns=@JoinColumn(name="employeeId"))
	private Collection<Employee> employees;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) throws DaoException {
		if ("".equals(name))
			throw new DaoException("Field Name is empty");
		if (name.length() > 50)
			throw new DaoException("Field Name is too long");
		this.name = name;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) throws DaoException {
		if ("".equals(description))
			throw new DaoException("Field Description is empty");
		if (description.length() > 550)
			throw new DaoException("Field Description is too long");
		this.description = description;
	}



	
	
}
